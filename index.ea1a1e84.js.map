{"mappings":"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MACA,UACA,SACA,UACA,SACA,OACA,OACA,MACA,QACA,SACA,MACA,MACA,OACA,OACA,KACA,OACA,OACA,OACA,OACA,SACA,YACA,QACA,OACA,MACA,MACA,OACA,OACA,KACA,KACA,QACA,QACA,OACA,MACA,MACA,OACA,OACA,MACA,MACA,MACA,MACA,OACA,OACA,OACA,MACA,SACA,IACA,IACA,IACA,IACA,MACA,KACA,KACA,KACA,KACA,MACA,MACA,MACA,KACA,KACA,KACA,KACA,OACA,OACA,OACA,UACA,OACA,OACA,QACA,OACA,QACA,OACA,MACA,SACA,OACA,OACA,OACA,SACA,SACA,OACA,OACA,OACA,OACA,OACA,OACA,KACA,KACA,MACA,OACA,MACA,SACA,KACA,KACA,OACA,OACA,OACA,SACA,OACA,UACA,QACA,OACA,UACA,OACA,QACA,QACA,OACA,KACA,KACA,OACA,OACA,OACA,QACA,MACA,OACA,QACA,KACA,MACA,MACA,UACA,MACA,SACA,KACA,KACA,OACA,MACA,KACA,KACA,MACA,KACA,KACA,MACA,MACA,OACA,MACA,OACA,QACA,QACA,SACA,QACA,OACA,SACA,SACA,SACA,MACA,WACA,QACA,IACA,IACA,OACA,KACA,OACA,QACA,SACA,MACA,QACA,OACA,OACA,QACA,MACA,IACA,IACA,IACA,IACA,MACA,OACA,OACA,OACA,OACA,MACA,MACA,OACA,SACA,MACA,MACA,QACA,SACA,OACA,OACA,UACA,MACA,OACA,MACA,QACA,OACA,QACA,QACA,KACA,OACA,OACA,QACA,QACA,OACA,QACA,OACA,QACA,QACA,SACA,MACA,OACA,QACA,QACA,OACA,OACA,OACA,OACA,QACA,MACA,MACA,MACA,QACA,QACA,QACA,OACA,OACA,QACA,QACA,QACA,UACA,UACA,OACA,KACA,KACA,QACA,MACA,KACA,KACA,KACA,MACA,WACA,OACA,OACA,OACA,OACA,OACA,MACA,MACA,QACA,MACA,KACA,OACA,OACA,OACA,MACA,OACA,OACA,QACA,MACA,MACA,OACA,OACA,SACA,OACA,OACA,OACA,SACA,OACA,OACA,QACA,QACA,IACA,IACA,MACA,MACA,MACA,MACA,QACA,OACA,OACD","sources":["<anon>","src/poems.ts","src/words.ts"],"sourcesContent":["const $5b4d51236d15bb1f$export$32f3ab83c0b4a105 = [\n    \"&\",\n    \"a\",\n    \"a\",\n    \"a\",\n    \"about\",\n    \"above\",\n    \"act\",\n    \"again\",\n    \"age\",\n    \"air\",\n    \"all\",\n    \"alone\",\n    \"always\",\n    \"am\",\n    \"an\",\n    \"an\",\n    \"and\",\n    \"and\",\n    \"and\",\n    \"and\",\n    \"angry\",\n    \"apartment\",\n    \"are\",\n    \"are\",\n    \"as\",\n    \"as\",\n    \"ask\",\n    \"at\",\n    \"at\",\n    \"away\",\n    \"bacon\",\n    \"bad\",\n    \"be\",\n    \"be\",\n    \"beauty\",\n    \"bed\",\n    \"been\",\n    \"begin\",\n    \"being\",\n    \"believe\",\n    \"belong\",\n    \"bitter\",\n    \"blank\",\n    \"blue\",\n    \"break\",\n    \"bring\",\n    \"burn\",\n    \"but\",\n    \"but\",\n    \"by\",\n    \"by\",\n    \"call\",\n    \"can\",\n    \"car\",\n    \"change\",\n    \"chocolate\",\n    \"city\",\n    \"clock\",\n    \"coffee\",\n    \"cold\",\n    \"come\",\n    \"could\",\n    \"cry\",\n    \"curse\",\n    \"d\",\n    \"day\",\n    \"dead\",\n    \"deep\",\n    \"did\",\n    \"die\",\n    \"different\",\n    \"dirty\",\n    \"do\",\n    \"dog\",\n    \"door\",\n    \"dream\",\n    \"drink\",\n    \"drive\",\n    \"dry\",\n    \"e\",\n    \"easy\",\n    \"eat\",\n    \"ed\",\n    \"ed\",\n    \"empty\",\n    \"end\",\n    \"er\",\n    \"es\",\n    \"es\",\n    \"est\",\n    \"ever\",\n    \"eye\",\n    \"face\",\n    \"family\",\n    \"far\",\n    \"feel\",\n    \"fight\",\n    \"find\",\n    \"fire\",\n    \"fix\",\n    \"for\",\n    \"for\",\n    \"forever\",\n    \"forget\",\n    \"forgive\",\n    \"friend\",\n    \"from\",\n    \"from\",\n    \"ful\",\n    \"funny\",\n    \"garden\",\n    \"gas\",\n    \"get\",\n    \"girl\",\n    \"give\",\n    \"go\",\n    \"gone\",\n    \"good\",\n    \"hair\",\n    \"hand\",\n    \"happen\",\n    \"happiness\",\n    \"happy\",\n    \"hard\",\n    \"has\",\n    \"has\",\n    \"have\",\n    \"have\",\n    \"he\",\n    \"he\",\n    \"heart\",\n    \"heavy\",\n    \"help\",\n    \"her\",\n    \"her\",\n    \"here\",\n    \"high\",\n    \"him\",\n    \"him\",\n    \"his\",\n    \"his\",\n    \"hold\",\n    \"hope\",\n    \"hour\",\n    \"how\",\n    \"hungry\",\n    \"I\",\n    \"I\",\n    \"I\",\n    \"I\",\n    \"ice\",\n    \"if\",\n    \"in\",\n    \"in\",\n    \"in\",\n    \"ing\",\n    \"ing\",\n    \"ing\",\n    \"is\",\n    \"is\",\n    \"it\",\n    \"it\",\n    \"keep\",\n    \"kill\",\n    \"kiss\",\n    \"kitchen\",\n    \"know\",\n    \"late\",\n    \"laugh\",\n    \"lazy\",\n    \"learn\",\n    \"less\",\n    \"let\",\n    \"letter\",\n    \"life\",\n    \"like\",\n    \"like\",\n    \"listen\",\n    \"little\",\n    \"live\",\n    \"lock\",\n    \"lone\",\n    \"long\",\n    \"look\",\n    \"love\",\n    \"ly\",\n    \"ly\",\n    \"mad\",\n    \"make\",\n    \"man\",\n    \"matter\",\n    \"me\",\n    \"me\",\n    \"mean\",\n    \"meet\",\n    \"mind\",\n    \"minute\",\n    \"miss\",\n    \"mixtape\",\n    \"money\",\n    \"moon\",\n    \"morning\",\n    \"move\",\n    \"movie\",\n    \"music\",\n    \"must\",\n    \"my\",\n    \"my\",\n    \"name\",\n    \"near\",\n    \"need\",\n    \"never\",\n    \"new\",\n    \"next\",\n    \"night\",\n    \"no\",\n    \"not\",\n    \"not\",\n    \"nothing\",\n    \"now\",\n    \"number\",\n    \"of\",\n    \"of\",\n    \"okay\",\n    \"old\",\n    \"on\",\n    \"on\",\n    \"one\",\n    \"or\",\n    \"or\",\n    \"our\",\n    \"out\",\n    \"over\",\n    \"own\",\n    \"page\",\n    \"paper\",\n    \"party\",\n    \"people\",\n    \"phone\",\n    \"play\",\n    \"please\",\n    \"pretty\",\n    \"purple\",\n    \"put\",\n    \"question\",\n    \"quick\",\n    \"r\",\n    \"r\",\n    \"rain\",\n    \"re\",\n    \"read\",\n    \"ready\",\n    \"reason\",\n    \"red\",\n    \"right\",\n    \"road\",\n    \"room\",\n    \"rough\",\n    \"run\",\n    \"s\",\n    \"s\",\n    \"s\",\n    \"s\",\n    \"sad\",\n    \"safe\",\n    \"said\",\n    \"same\",\n    \"save\",\n    \"say\",\n    \"see\",\n    \"seek\",\n    \"shadow\",\n    \"she\",\n    \"she\",\n    \"short\",\n    \"should\",\n    \"show\",\n    \"sick\",\n    \"silence\",\n    \"sit\",\n    \"skin\",\n    \"sky\",\n    \"sleep\",\n    \"slow\",\n    \"small\",\n    \"smell\",\n    \"so\",\n    \"some\",\n    \"song\",\n    \"sorry\",\n    \"start\",\n    \"stay\",\n    \"still\",\n    \"stop\",\n    \"story\",\n    \"sugar\",\n    \"summer\",\n    \"sun\",\n    \"sure\",\n    \"sweet\",\n    \"table\",\n    \"take\",\n    \"talk\",\n    \"tear\",\n    \"tell\",\n    \"thank\",\n    \"the\",\n    \"the\",\n    \"the\",\n    \"their\",\n    \"there\",\n    \"these\",\n    \"they\",\n    \"they\",\n    \"thing\",\n    \"think\",\n    \"those\",\n    \"thought\",\n    \"through\",\n    \"time\",\n    \"to\",\n    \"to\",\n    \"today\",\n    \"try\",\n    \"TV\",\n    \"up\",\n    \"us\",\n    \"use\",\n    \"vacation\",\n    \"very\",\n    \"wait\",\n    \"walk\",\n    \"want\",\n    \"warm\",\n    \"was\",\n    \"was\",\n    \"water\",\n    \"way\",\n    \"we\",\n    \"week\",\n    \"well\",\n    \"were\",\n    \"wet\",\n    \"what\",\n    \"when\",\n    \"white\",\n    \"who\",\n    \"why\",\n    \"will\",\n    \"will\",\n    \"window\",\n    \"wish\",\n    \"with\",\n    \"with\",\n    \"wonder\",\n    \"word\",\n    \"work\",\n    \"would\",\n    \"write\",\n    \"y\",\n    \"y\",\n    \"yet\",\n    \"you\",\n    \"you\",\n    \"you\",\n    \"young\",\n    \"your\",\n    \"your\"\n];\n\n\nclass $a82fb233966e56eb$var$Word {\n    static #_ = (()=>{\n        this.wordInstances = new Map();\n    })();\n    static #_1 = (()=>{\n        this.elementToWord = new Map();\n    })();\n    constructor(word, x, y){\n        this.word = word;\n        this.x = x;\n        this.y = y;\n        this.wordNumber = $a82fb233966e56eb$var$Word.wordInstances.get(word) ?? 1;\n        this.element = document.createElement(\"div\");\n        this.element.classList.add(\"type-word\");\n        this.element.classList.add(word);\n        this.element.id = word;\n        this.element.innerHTML = word;\n        this.element.draggable = \"true\";\n        this.element.style.position = \"absolute\";\n        this.element.addEventListener(\"dragstart\", $a82fb233966e56eb$var$handleDragStart);\n        this.element.addEventListener(\"dragend\", $a82fb233966e56eb$var$handleDragEnd);\n        this.element.addEventListener(\"drag\", $a82fb233966e56eb$var$handleDrag);\n        this.element.style.left = x + \"px\";\n        this.element.style.top = y + \"px\";\n        $a82fb233966e56eb$var$Word.wordInstances.set(word, ($a82fb233966e56eb$var$Word.wordInstances.get(word) ?? 0) + 1);\n        $a82fb233966e56eb$var$Word.elementToWord.set(this.element, this);\n    }\n    // Currently unused - forces words that this collides to move.\n    processCollisions() {\n        const thisCenterX = this.element.getBoundingClientRect().x + this.element.getBoundingClientRect().width / 2;\n        const thisCenterY = this.element.getBoundingClientRect().y + this.element.getBoundingClientRect().height / 2;\n        for (const word of $a82fb233966e56eb$var$Word.elementToWord.values())if (this !== word && $a82fb233966e56eb$var$rectIntersects(this.element.getBoundingClientRect(), word.element.getBoundingClientRect())) {\n            const wordCenterX = word.element.getBoundingClientRect().x + word.element.getBoundingClientRect().width / 2;\n            const wordCenterY = word.element.getBoundingClientRect().y + word.element.getBoundingClientRect().height / 2;\n            const deltaX = wordCenterX - thisCenterX;\n            const deltaY = wordCenterY - thisCenterY;\n            const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n            word.element.style.left = `${word.element.getBoundingClientRect().x + deltaX / distance * 30}px`;\n            word.element.style.top = `${word.element.getBoundingClientRect().y + deltaY / distance * 20}px`;\n        }\n    }\n}\nfunction $a82fb233966e56eb$var$handleDragStart(event) {\n    event.dataTransfer.setData(\"text/plain\", // \"word1,x,y;\"\n    `${this.id};${event.clientX - event.srcElement.getBoundingClientRect().x};${event.clientY - event.srcElement.getBoundingClientRect().y}`);\n}\nfunction $a82fb233966e56eb$var$handleDrag(event) {\n    this.last_x = event.clientX;\n    this.last_y = event.clientY;\n}\nfunction $a82fb233966e56eb$var$handleDragEnd(event) {\n    const poemEl = document.getElementById(\"poem\");\n    const poemRect = poemEl?.getBoundingClientRect();\n    const wordRect = event.srcElement?.getBoundingClientRect();\n    const isClickInBox = this.last_x > poemRect.x && this.last_y > poemRect.y && this.last_x < poemRect.x + poemRect.width && this.last_y < poemRect.y + poemRect.height;\n    let newX, newY;\n    // the -3 is somehow related to the border width or something. It keeps the div centered.\n    if (!isClickInBox) {\n        newX = this.last_x - Number(event.srcElement.style.leftTemp) - 3;\n        newY = this.last_y - Number(event.srcElement.style.topTemp) - 3;\n    } else {\n        newX = this.last_x - poemRect.x - Number(event.srcElement.style.leftTemp) - 3;\n        newY = this.last_y - poemRect.y - Number(event.srcElement.style.topTemp) - 3;\n    }\n    event.srcElement.style.left = `${newX}px`;\n    event.srcElement.style.top = `${newY}px`;\n    event.srcElement.style.leftTemp = 0;\n    event.srcElement.style.topTemp = 0;\n    // Modify our internal Word representation\n    $a82fb233966e56eb$var$Word.elementToWord.get(event.srcElement).x = newX;\n    $a82fb233966e56eb$var$Word.elementToWord.get(event.srcElement).y = newY;\n    $a82fb233966e56eb$var$saveWordsInBox();\n}\nfunction $a82fb233966e56eb$var$rectIntersects(rect1, rect2) {\n    return rect1.x + rect1.width > rect2.x && rect1.y + rect1.height > rect2.y && rect1.x < rect2.x + rect2.width && rect1.y < rect2.y + rect2.height;\n}\nfunction $a82fb233966e56eb$var$isWordInBox(wordEl) {\n    const poemEl = document.getElementById(\"poem\");\n    const poemRect = poemEl?.getBoundingClientRect();\n    const wordRect = wordEl?.getBoundingClientRect();\n    return $a82fb233966e56eb$var$rectIntersects(poemRect, wordRect);\n}\nfunction $a82fb233966e56eb$var$saveWordsInBox() {\n    let wordsString = \"/\";\n    const poemEl = document.getElementById(\"poem\");\n    const poemRect = poemEl?.getBoundingClientRect();\n    Array.from(document.getElementsByClassName(\"type-word\")).forEach((wordEl)=>{\n        const wordRect = wordEl?.getBoundingClientRect();\n        if ($a82fb233966e56eb$var$isWordInBox(wordEl)) // \"word,x,y;\"\n        wordsString += `${wordEl.innerHTML},${Math.round(wordRect.x - poemRect.x - 3)},${Math.round(wordRect.y - poemRect.y - 3)};`;\n    });\n    history.replaceState(null, \"\", wordsString);\n}\n// Put all strings in WordList into divs on the webpage\nfunction $a82fb233966e56eb$var$addStringsToPage(wordList) {\n    const body = document.getElementsByTagName(\"body\")[0];\n    const poem = document.getElementById(\"poem\");\n    // Parse the URL - put any of those words in the right spots\n    const urlpath = window.location.pathname;\n    const wordsToSkip = new Map();\n    const wordsOccurrence = new Map();\n    if (urlpath.length > 1) {\n        // remove the final semicolon\n        const urlWords = urlpath.substring(1, urlpath.length - 1).split(\";\");\n        urlWords.forEach((wordSet)=>{\n            const [word, xcor, ycor] = wordSet.split(\",\");\n            wordsToSkip.set(word, (wordsToSkip.get(word) ?? 0) + 1);\n            wordsOccurrence.set(word, (wordsOccurrence.get(word) ?? 0) + 1);\n            const wordObj = new $a82fb233966e56eb$var$Word(word, Number(xcor), Number(ycor));\n            poem?.appendChild(wordObj.element);\n        });\n    }\n    const bodyRect = document.getElementsByTagName(\"body\")[0].getBoundingClientRect();\n    wordList.forEach((word)=>{\n        if (wordsToSkip.get(word) > 0) wordsToSkip.set(word, wordsToSkip.get(word) - 1);\n        else {\n            wordsOccurrence.set(word, (wordsOccurrence.get(word) ?? 0) + 1);\n            const wordObj = new $a82fb233966e56eb$var$Word(word, 0, 0);\n            body?.appendChild(wordObj.element);\n            do {\n                wordObj.element.style.left = Math.random() * bodyRect.width * 0.9 + 50 + \"px\";\n                wordObj.element.style.top = Math.random() * bodyRect.height * 0.9 + 50 + \"px\";\n            }while ($a82fb233966e56eb$var$isWordInBox(wordObj.element));\n        }\n    });\n}\n// Turns a list of words into a URL query string\nfunction $a82fb233966e56eb$var$getQueryString(wordList) {\n    return wordList.reduce((acc, word)=>{\n        return acc + \"-\" + word;\n    });\n}\n// Turns a URL query string into a list of words\nfunction $a82fb233966e56eb$var$getWordListFromQueryString(queryString) {\n    return queryString.split(\"-\");\n}\nconst $a82fb233966e56eb$var$dropAreaIds = [\n    \"poem\",\n    \"container\"\n];\nconst $a82fb233966e56eb$var$body = document.getElementsByTagName(\"body\")[0];\n$a82fb233966e56eb$var$body.addEventListener(\"dragover\", (event)=>{\n    event.preventDefault();\n    return false;\n});\n$a82fb233966e56eb$var$body.addEventListener(\"drop\", (event)=>{\n    event.preventDefault();\n    const dataList = event.dataTransfer.getData(\"text/plain\").split(\";\");\n    event.dataTransfer?.setData(\"text/plain\", dataList.join(\";\"));\n    const element = document.getElementById(dataList[0]);\n    (element?.style).leftTemp = dataList[1];\n    (element?.style).topTemp = dataList[2];\n    try {\n        if (Array.from(event.target.classList).find((className)=>className === \"type-word\") !== undefined) event.target.parentElement.appendChild(element);\n        else event.target.appendChild(element);\n    } catch (error) {\n        console.warn(error);\n    }\n    return false;\n});\n$a82fb233966e56eb$var$addStringsToPage((0, $5b4d51236d15bb1f$export$32f3ab83c0b4a105));\n\n\n//# sourceMappingURL=index.ea1a1e84.js.map\n","import { WordList } from \"./words.ts\";\n\nclass Word {\n  word: string;\n  x: number;\n  y: number;\n  element: HTMLElement;\n  wordNumber: number;\n\n  static wordInstances: Map<string, number> = new Map<string, number>();\n  static elementToWord: Map<HTMLElement, Word> = new Map<HTMLElement, Word>();\n\n  constructor(word: string, x: number, y: number) {\n    this.word = word;\n    this.x = x;\n    this.y = y;\n    this.wordNumber = Word.wordInstances.get(word) ?? 1;\n\n    this.element = document.createElement(\"div\");\n    this.element.classList.add(\"type-word\");\n    this.element.classList.add(word);\n    this.element.id = word;\n    this.element.innerHTML = word;\n    this.element.draggable = \"true\";\n    this.element.style.position = \"absolute\";\n    this.element.addEventListener(\"dragstart\", handleDragStart);\n    this.element.addEventListener(\"dragend\", handleDragEnd);\n    this.element.addEventListener(\"drag\", handleDrag);\n    this.element.style.left = x + \"px\";\n    this.element.style.top = y + \"px\";\n\n    Word.wordInstances.set(word, (Word.wordInstances.get(word) ?? 0) + 1);\n    Word.elementToWord.set(this.element, this);\n  }\n\n  // Currently unused - forces words that this collides to move.\n  processCollisions() {\n    const thisCenterX =\n      this.element.getBoundingClientRect().x +\n      this.element.getBoundingClientRect().width / 2;\n    const thisCenterY =\n      this.element.getBoundingClientRect().y +\n      this.element.getBoundingClientRect().height / 2;\n\n    for (const word of Word.elementToWord.values()) {\n      if (\n        this !== word &&\n        rectIntersects(\n          this.element.getBoundingClientRect(),\n          word.element.getBoundingClientRect()\n        )\n      ) {\n        const wordCenterX =\n          word.element.getBoundingClientRect().x +\n          word.element.getBoundingClientRect().width / 2;\n        const wordCenterY =\n          word.element.getBoundingClientRect().y +\n          word.element.getBoundingClientRect().height / 2;\n\n        const deltaX = wordCenterX - thisCenterX;\n        const deltaY = wordCenterY - thisCenterY;\n        const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n\n        word.element.style.left = `${\n          word.element.getBoundingClientRect().x + (deltaX / distance) * 30\n        }px`;\n        word.element.style.top = `${\n          word.element.getBoundingClientRect().y + (deltaY / distance) * 20\n        }px`;\n      }\n    }\n  }\n}\n\nfunction handleDragStart(event) {\n  event.dataTransfer.setData(\n    \"text/plain\",\n    // \"word1,x,y;\"\n    `${this.id};${event.clientX - event.srcElement.getBoundingClientRect().x};${\n      event.clientY - event.srcElement.getBoundingClientRect().y\n    }`\n  );\n}\n\nfunction handleDrag(event) {\n  this.last_x = event.clientX;\n  this.last_y = event.clientY;\n}\n\nfunction handleDragEnd(event) {\n  const poemEl = document.getElementById(\"poem\");\n  const poemRect = poemEl?.getBoundingClientRect();\n  const wordRect = event.srcElement?.getBoundingClientRect();\n\n  const isClickInBox =\n    this.last_x > poemRect.x &&\n    this.last_y > poemRect.y &&\n    this.last_x < poemRect.x + poemRect.width &&\n    this.last_y < poemRect.y + poemRect.height;\n\n  let newX, newY;\n\n  // the -3 is somehow related to the border width or something. It keeps the div centered.\n  if (!isClickInBox) {\n    newX = this.last_x - Number(event.srcElement.style.leftTemp) - 3;\n    newY = this.last_y - Number(event.srcElement.style.topTemp) - 3;\n  } else {\n    newX =\n      this.last_x - poemRect.x - Number(event.srcElement.style.leftTemp) - 3;\n    newY =\n      this.last_y - poemRect.y - Number(event.srcElement.style.topTemp) - 3;\n  }\n\n  event.srcElement.style.left = `${newX}px`;\n  event.srcElement.style.top = `${newY}px`;\n\n  event.srcElement.style.leftTemp = 0;\n  event.srcElement.style.topTemp = 0;\n\n  // Modify our internal Word representation\n  Word.elementToWord.get(event.srcElement).x = newX;\n  Word.elementToWord.get(event.srcElement).y = newY;\n\n  saveWordsInBox();\n}\n\nfunction rectIntersects(rect1, rect2) {\n  return (\n    rect1.x + rect1.width > rect2.x &&\n    rect1.y + rect1.height > rect2.y &&\n    rect1.x < rect2.x + rect2.width &&\n    rect1.y < rect2.y + rect2.height\n  );\n}\n\nfunction isWordInBox(wordEl: HTMLElement) {\n  const poemEl = document.getElementById(\"poem\");\n  const poemRect = poemEl?.getBoundingClientRect();\n  const wordRect = wordEl?.getBoundingClientRect();\n\n  return rectIntersects(poemRect, wordRect);\n}\n\nfunction saveWordsInBox() {\n  let wordsString = \"/\";\n  const poemEl = document.getElementById(\"poem\");\n  const poemRect = poemEl?.getBoundingClientRect();\n\n  Array.from(document.getElementsByClassName(\"type-word\")).forEach((wordEl) => {\n    const wordRect = wordEl?.getBoundingClientRect();\n\n    if (isWordInBox(wordEl)) {\n      // \"word,x,y;\"\n      wordsString += `${wordEl.innerHTML},${Math.round(\n        wordRect.x - poemRect.x - 3\n      )},${Math.round(wordRect.y - poemRect.y - 3)};`;\n    }\n  });\n\n  history.replaceState(null, \"\", wordsString);\n}\n\n// Put all strings in WordList into divs on the webpage\nfunction addStringsToPage(wordList: string[]) {\n  const body = document.getElementsByTagName(\"body\")[0];\n  const poem = document.getElementById(\"poem\");\n\n  // Parse the URL - put any of those words in the right spots\n  const urlpath = window.location.pathname;\n  const wordsToSkip = new Map<string, number>();\n  const wordsOccurrence = new Map<string, number>();\n\n  if (urlpath.length > 1) {\n    // remove the final semicolon\n    const urlWords = urlpath.substring(1, urlpath.length - 1).split(\";\");\n\n    urlWords.forEach((wordSet) => {\n      const [word, xcor, ycor] = wordSet.split(\",\");\n\n      wordsToSkip.set(word, (wordsToSkip.get(word) ?? 0) + 1);\n      wordsOccurrence.set(word, (wordsOccurrence.get(word) ?? 0) + 1);\n\n      const wordObj = new Word(word, Number(xcor), Number(ycor));\n      poem?.appendChild(wordObj.element);\n    });\n  }\n\n  const bodyRect = document\n    .getElementsByTagName(\"body\")[0]\n    .getBoundingClientRect();\n\n  wordList.forEach((word) => {\n    if (wordsToSkip.get(word) > 0) {\n      wordsToSkip.set(word, wordsToSkip.get(word) - 1);\n    } else {\n      wordsOccurrence.set(word, (wordsOccurrence.get(word) ?? 0) + 1);\n\n      const wordObj = new Word(word, 0, 0);\n      body?.appendChild(wordObj.element);\n\n      do {\n        wordObj.element.style.left =\n          Math.random() * bodyRect.width * 0.9 + 50 + \"px\";\n        wordObj.element.style.top =\n          Math.random() * bodyRect.height * 0.9 + 50 + \"px\";\n      } while (isWordInBox(wordObj.element));\n    }\n  });\n}\n\n// Turns a list of words into a URL query string\nfunction getQueryString(wordList: string[]) {\n  return wordList.reduce((acc, word) => {\n    return acc + \"-\" + word;\n  });\n}\n\n// Turns a URL query string into a list of words\nfunction getWordListFromQueryString(queryString: string) {\n  return queryString.split(\"-\");\n}\n\nconst dropAreaIds = [\"poem\", \"container\"];\n\nconst body = document.getElementsByTagName(\"body\")[0];\nbody.addEventListener(\"dragover\", (event) => {\n  event.preventDefault();\n  return false;\n});\nbody.addEventListener(\"drop\", (event) => {\n  event.preventDefault();\n  const dataList = event.dataTransfer.getData(\"text/plain\").split(\";\");\n  event.dataTransfer?.setData(\"text/plain\", dataList.join(\";\"));\n  const element = document.getElementById(dataList[0]);\n\n  element?.style.leftTemp = dataList[1];\n  element?.style.topTemp = dataList[2];\n\n  try {\n    if (\n      Array.from(event.target.classList).find(\n        (className) => className === \"type-word\"\n      ) !== undefined\n    ) {\n      event.target.parentElement.appendChild(element);\n    } else {\n      event.target.appendChild(element);\n    }\n  } catch (error) {\n    console.warn(error);\n  }\n  return false;\n});\n\naddStringsToPage(WordList);\n","const WordList = [\n  \"&\",\n  \"a\",\n  \"a\",\n  \"a\",\n  \"about\",\n  \"above\",\n  \"act\",\n  \"again\",\n  \"age\",\n  \"air\",\n  \"all\",\n  \"alone\",\n  \"always\",\n  \"am\",\n  \"an\",\n  \"an\",\n  \"and\",\n  \"and\",\n  \"and\",\n  \"and\",\n  \"angry\",\n  \"apartment\",\n  \"are\",\n  \"are\",\n  \"as\",\n  \"as\",\n  \"ask\",\n  \"at\",\n  \"at\",\n  \"away\",\n  \"bacon\",\n  \"bad\",\n  \"be\",\n  \"be\",\n  \"beauty\",\n  \"bed\",\n  \"been\",\n  \"begin\",\n  \"being\",\n  \"believe\",\n  \"belong\",\n  \"bitter\",\n  \"blank\",\n  \"blue\",\n  \"break\",\n  \"bring\",\n  \"burn\",\n  \"but\",\n  \"but\",\n  \"by\",\n  \"by\",\n  \"call\",\n  \"can\",\n  \"car\",\n  \"change\",\n  \"chocolate\",\n  \"city\",\n  \"clock\",\n  \"coffee\",\n  \"cold\",\n  \"come\",\n  \"could\",\n  \"cry\",\n  \"curse\",\n  \"d\",\n  \"day\",\n  \"dead\",\n  \"deep\",\n  \"did\",\n  \"die\",\n  \"different\",\n  \"dirty\",\n  \"do\",\n  \"dog\",\n  \"door\",\n  \"dream\",\n  \"drink\",\n  \"drive\",\n  \"dry\",\n  \"e\",\n  \"easy\",\n  \"eat\",\n  \"ed\",\n  \"ed\",\n  \"empty\",\n  \"end\",\n  \"er\",\n  \"es\",\n  \"es\",\n  \"est\",\n  \"ever\",\n  \"eye\",\n  \"face\",\n  \"family\",\n  \"far\",\n  \"feel\",\n  \"fight\",\n  \"find\",\n  \"fire\",\n  \"fix\",\n  \"for\",\n  \"for\",\n  \"forever\",\n  \"forget\",\n  \"forgive\",\n  \"friend\",\n  \"from\",\n  \"from\",\n  \"ful\",\n  \"funny\",\n  \"garden\",\n  \"gas\",\n  \"get\",\n  \"girl\",\n  \"give\",\n  \"go\",\n  \"gone\",\n  \"good\",\n  \"hair\",\n  \"hand\",\n  \"happen\",\n  \"happiness\",\n  \"happy\",\n  \"hard\",\n  \"has\",\n  \"has\",\n  \"have\",\n  \"have\",\n  \"he\",\n  \"he\",\n  \"heart\",\n  \"heavy\",\n  \"help\",\n  \"her\",\n  \"her\",\n  \"here\",\n  \"high\",\n  \"him\",\n  \"him\",\n  \"his\",\n  \"his\",\n  \"hold\",\n  \"hope\",\n  \"hour\",\n  \"how\",\n  \"hungry\",\n  \"I\",\n  \"I\",\n  \"I\",\n  \"I\",\n  \"ice\",\n  \"if\",\n  \"in\",\n  \"in\",\n  \"in\",\n  \"ing\",\n  \"ing\",\n  \"ing\",\n  \"is\",\n  \"is\",\n  \"it\",\n  \"it\",\n  \"keep\",\n  \"kill\",\n  \"kiss\",\n  \"kitchen\",\n  \"know\",\n  \"late\",\n  \"laugh\",\n  \"lazy\",\n  \"learn\",\n  \"less\",\n  \"let\",\n  \"letter\",\n  \"life\",\n  \"like\",\n  \"like\",\n  \"listen\",\n  \"little\",\n  \"live\",\n  \"lock\",\n  \"lone\",\n  \"long\",\n  \"look\",\n  \"love\",\n  \"ly\",\n  \"ly\",\n  \"mad\",\n  \"make\",\n  \"man\",\n  \"matter\",\n  \"me\",\n  \"me\",\n  \"mean\",\n  \"meet\",\n  \"mind\",\n  \"minute\",\n  \"miss\",\n  \"mixtape\",\n  \"money\",\n  \"moon\",\n  \"morning\",\n  \"move\",\n  \"movie\",\n  \"music\",\n  \"must\",\n  \"my\",\n  \"my\",\n  \"name\",\n  \"near\",\n  \"need\",\n  \"never\",\n  \"new\",\n  \"next\",\n  \"night\",\n  \"no\",\n  \"not\",\n  \"not\",\n  \"nothing\",\n  \"now\",\n  \"number\",\n  \"of\",\n  \"of\",\n  \"okay\",\n  \"old\",\n  \"on\",\n  \"on\",\n  \"one\",\n  \"or\",\n  \"or\",\n  \"our\",\n  \"out\",\n  \"over\",\n  \"own\",\n  \"page\",\n  \"paper\",\n  \"party\",\n  \"people\",\n  \"phone\",\n  \"play\",\n  \"please\",\n  \"pretty\",\n  \"purple\",\n  \"put\",\n  \"question\",\n  \"quick\",\n  \"r\",\n  \"r\",\n  \"rain\",\n  \"re\",\n  \"read\",\n  \"ready\",\n  \"reason\",\n  \"red\",\n  \"right\",\n  \"road\",\n  \"room\",\n  \"rough\",\n  \"run\",\n  \"s\",\n  \"s\",\n  \"s\",\n  \"s\",\n  \"sad\",\n  \"safe\",\n  \"said\",\n  \"same\",\n  \"save\",\n  \"say\",\n  \"see\",\n  \"seek\",\n  \"shadow\",\n  \"she\",\n  \"she\",\n  \"short\",\n  \"should\",\n  \"show\",\n  \"sick\",\n  \"silence\",\n  \"sit\",\n  \"skin\",\n  \"sky\",\n  \"sleep\",\n  \"slow\",\n  \"small\",\n  \"smell\",\n  \"so\",\n  \"some\",\n  \"song\",\n  \"sorry\",\n  \"start\",\n  \"stay\",\n  \"still\",\n  \"stop\",\n  \"story\",\n  \"sugar\",\n  \"summer\",\n  \"sun\",\n  \"sure\",\n  \"sweet\",\n  \"table\",\n  \"take\",\n  \"talk\",\n  \"tear\",\n  \"tell\",\n  \"thank\",\n  \"the\",\n  \"the\",\n  \"the\",\n  \"their\",\n  \"there\",\n  \"these\",\n  \"they\",\n  \"they\",\n  \"thing\",\n  \"think\",\n  \"those\",\n  \"thought\",\n  \"through\",\n  \"time\",\n  \"to\",\n  \"to\",\n  \"today\",\n  \"try\",\n  \"TV\",\n  \"up\",\n  \"us\",\n  \"use\",\n  \"vacation\",\n  \"very\",\n  \"wait\",\n  \"walk\",\n  \"want\",\n  \"warm\",\n  \"was\",\n  \"was\",\n  \"water\",\n  \"way\",\n  \"we\",\n  \"week\",\n  \"well\",\n  \"were\",\n  \"wet\",\n  \"what\",\n  \"when\",\n  \"white\",\n  \"who\",\n  \"why\",\n  \"will\",\n  \"will\",\n  \"window\",\n  \"wish\",\n  \"with\",\n  \"with\",\n  \"wonder\",\n  \"word\",\n  \"work\",\n  \"would\",\n  \"write\",\n  \"y\",\n  \"y\",\n  \"yet\",\n  \"you\",\n  \"you\",\n  \"you\",\n  \"young\",\n  \"your\",\n  \"your\",\n];\n\nexport { WordList };\n"],"names":["$a82fb233966e56eb$var$Word","_","wordInstances","Map","_1","elementToWord","constructor","word","x","y","wordNumber","get","element","document","createElement","classList","add","id","innerHTML","draggable","style","position","addEventListener","$a82fb233966e56eb$var$handleDragStart","$a82fb233966e56eb$var$handleDragEnd","$a82fb233966e56eb$var$handleDrag","left","top","set","processCollisions","thisCenterX","getBoundingClientRect","width","thisCenterY","height","values","$a82fb233966e56eb$var$rectIntersects","wordCenterX","wordCenterY","deltaX","deltaY","distance","Math","sqrt","event","dataTransfer","setData","clientX","srcElement","clientY","last_x","last_y","newX","newY","poemEl","getElementById","poemRect","isClickInBox","Number","leftTemp","topTemp","$a82fb233966e56eb$var$saveWordsInBox","wordsString","Array","from","getElementsByClassName","forEach","wordEl","wordRect","$a82fb233966e56eb$var$isWordInBox","round","history","replaceState","rect1","rect2","$a82fb233966e56eb$var$body","getElementsByTagName","preventDefault","dataList","getData","split","join","undefined","target","find","className","parentElement","appendChild","error","console","warn","$a82fb233966e56eb$var$addStringsToPage","wordList","body","poem","urlpath","window","location","pathname","wordsToSkip","wordsOccurrence","length","urlWords","substring","wordSet","xcor","ycor","wordObj","bodyRect","random"],"version":3,"file":"index.ea1a1e84.js.map"}